#!/usr/bin/env bash

# exit if script tries to use undeclared variables.
set -u

#
#	 NAME
#	   netwatcher
#
#	 DESCRIPTION
#	   This script is executed by the local.netwatcher LaunchAgent
#
#	   To read the defaults:
#	   defaults read ~/Library/LaunchAgents/local.netwatcher.plist
#
#	   To change a default key, use "defaults write <key> <value>"
#	   "man defaults" for more info
#
#	 AUTHOR
#	   Don Feliciano (don@effinthing.com)
#

#-------------------------------------------------------------------------------
# Constants
declare -r CONFIG_FILE="${HOME}/.netwatcher/config"
declare -r LAST_MARKER="${HOME}/.netwatcher/last_known_network"
declare -r APPLE_TIME_SERVER="time.apple.com"

#-------------------------------------------------------------------------------
# Globals
PAUSE_TO_SETTLE="n"
PAUSE_TIME=3
THROTTLE=5
FORCE_CHECK=n

#-------------------------------------------------------------------------------
# Load user configuration
#
[[ -r ${CONFIG_FILE} ]] || { printf "Cannot read ${CONFIG_FILE}.\n"; exit 1; }
source ${CONFIG_FILE}

#-------------------------------------------------------------------------------
# Functions
#
notify() {
	local title="${1}"
	local message="${2}"

	printf "${title}\n${message}\n"

	[[ -x /usr/local/bin/terminal-notifier ]] || return 0
	[[ ${NOTIFICATION_CENTER} == false ]] && return 0

	/usr/local/bin/terminal-notifier -title "${title}" \
		-message "${message}" -sound Pop
}


enable_proxy() {
	local service

	IFS="$(printf "\n\b")"
	for service in $(/usr/sbin/networksetup -listnetworkserviceorder | \
	                 awk '/\([0-9]\).*Wi-Fi/ || /\([0-9]\).*Ethernet/{ print }' | \
					 sed 's/([0-9]) //'); do
		/usr/sbin/networksetup -setautoproxyurl ${service} http://wpad/wpad.dat
		/usr/sbin/networksetup -setautoproxystate ${service} on
	done
	unset IFS
    printf "WPAD Automatic Proxy URL: enabled\n"
}

disable_proxy() {
	local service

	IFS="$(printf "\n\b")"
	for service in $(/usr/sbin/networksetup -listnetworkserviceorder | \
	                 awk '/\([0-9]\).*Wi-Fi/ || /\([0-9]\).*Ethernet/{ print }' | \
					 sed 's/([0-9]) //'); do
		/usr/sbin/networksetup -setautoproxystate ${service} off
	done
	unset IFS
    printf "WPAD Automatic Proxy URL: disabled\n"
}

return_program_status() {
	local program="${1}"
	local status="$(pgrep -f "${program}")"
	if [[ ${status} == "" ]]; then
		printf "inactive"
	else
		printf "active"
	fi
}

quit_program() {
	local program="${1}"
	local friendly_name="$(echo ${program} | cut -d '.' -f 1)"

	#osascript -e "quit app \"${friendly_name}\""
	/usr/bin/osascript <<- EOF >/dev/null 2>&1
		try
			tell application "${friendly_name}" to quit
		on error error_message number error_number
			if (error_number is equal to 128) or (error_message contains "canceled") then
				delay 1
				do shell script "pkill -f \"${program}\" > /dev/null 2>&1"
			else
				say error_message
			end if
		end try
		EOF
	sleep .5
	pkill -f "${program}" > /dev/null 2>&1
    sleep .5
    printf "${friendly_name}: stopped\n"
}


set_default_printer() {
	local printer="${1}"
	if [[ ${printer} != none ]] && [[ -n ${printer} ]]; then
		printf "Setting default printer: ${printer}\n"
		lpoptions -d ${printer} > /dev/null 2>&1
	fi
}


print_dashes() {
	declare -i count
	declare -i num_dashes="${1}"
	for ((count=0; count!=num_dashes; count++)) { printf %s '-'; }
}

switch_config() {
  local config_file="${1}"
  local suffix="${2}"

  local source_config_file="${config_file}-${suffix}"
  if [[ -e $source_config_file ]]; then
    /bin/cp "${source_config_file}" "${config_file}"
  else
    if [[ -e $config_file ]]; then
      /bin/rm "${config_file}"
    fi
  fi
    printf "Configuration: ${config_file} -> ${suffix}\n"
}

start_proxifier() {
    if [[ ${PROXIFIER} == true ]]; then
	proxifier_status="$(return_program_status "Contents/MacOS/Proxifier")"
	if [[ ${proxifier_status} == inactive ]]; then
	    open -gja "Proxifier"
	    printf "Proxifier: started [ pid $(pgrep -f 'Contents/MacOS/Proxifier') ]\n"
	fi
    fi
}

stop_proxifier() {
    [[ ${PROXIFIER} == true ]] && quit_program "Proxifier"
}

switch_location() {
	local location="${1}"
	local ip_address="${2}"
	local interface="${3}"

	if [[ ${location} == work ]]; then
		notify "Location: Work" "IP: ${ip_address}, Interface: ${interface}"

		#
		# Show VPN properties
		local server
		local val
		declare -i i=0
		declare -a stats=()
		sleep 2
		for val in $(/opt/cisco/anyconnect/bin/vpn stats | awk '/notice: Connected to / || /Server Address:/ || /Protocol:/ { print $NF }'); do
		    stats[$i]=$val; i=$(( i + 1 ))
		done
		if (( ${#stats[*]} > 2 )); then
		    server=$(/usr/bin/dig -x ${stats[1]} +short | sed s/\.$//)
		    proto=${stats[2]}

		    if [[ $server == "" ]]; then
			# Sometimes dig doesn't return the hostname. 
			server=$(echo ${stats[0]} | sed 's/\.$//')
		    fi
		    printf "VPN Server: ${server}\nVPN Protocol: ${proto}\n"
		fi
		
		if [[ $server == *"oracle-ocna"* ]]; then
		    printf "OCNA: true\n";
		    stop_proxifier
		    enable_proxy
		    set_default_printer "${WORK_PRINTER}"
		    switch_config "/Users/${USER}/.gitconfig" "noproxy"
		    switch_config "/Users/${USER}/.m2/settings.xml" "noproxy"
		    switch_config "/Users/${USER}/.ssh/config" "noproxy"
		else
		    printf "OCNA: false\n";
		    start_proxifier
		    enable_proxy
		    set_default_printer "${WORK_PRINTER}"
		    switch_config "/Users/${USER}/.gitconfig" "proxy"
		    switch_config "/Users/${USER}/.m2/settings.xml" "proxy"
		    switch_config "/Users/${USER}/.ssh/config" "proxy"
		fi
	else
		notify "Location: Home" "IP: ${ip_address}, Interface: ${interface}"

		stop_proxifier
		disable_proxy
		set_default_printer "${HOME_PRINTER}"
		switch_config "/Users/${USER}/.gitconfig" "noproxy"
		switch_config "/Users/${USER}/.m2/settings.xml" "noproxy"
		switch_config "/Users/${USER}/.ssh/config" "noproxy"
	fi
}

purge_log() {
	local log_file="$(defaults read /Users/${USER}/Library/LaunchAgents/local.netwatcher StandardOutPath)"
	local log_size="$(du -k ${log_file} | awk '{ print $1 }')"
	if ((log_size > 1024)); then
		: > ${log_file}
		printf "$(date '+%b %d %H:%M:%S'): Purged ${log_file}\n"
	fi
}

finish() {
	local last_config=""

	(($# > 0)) && last_config="${@}"

	if [[ -n ${last_config} ]] && [[ ${last_config} != restart ]]; then
		printf "${last_config}" > ${LAST_MARKER}
	elif [[ ${last_config} == restart ]]; then
		rm -f ${LAST_MARKER}
	else
		touch ${LAST_MARKER}
	fi

	printf %s%b $(print_dashes 60) "\n"
	exit 0
}

perform_check_and_switch() {
  local interface=$(/sbin/route get ${WORK_HOST} 2> /dev/null | grep "interface:" | awk '{ print $2 }')
  local location
	if [[ $interface == "" ]]; then
	    location="home"
	    interface=$(/sbin/route get ${INTERNET_HOST} 2> /dev/null | grep "interface:" | awk '{ print $2 }')
	else
	    location="work"
	fi
  local ip_address=$(ifconfig ${interface} |grep -v 'inet6'|grep 'inet'|awk '{ print $2 }')

  switch_location "${location}" "${ip_address}" "${interface}"
}

main() {
	local OPTIND

	# Process command line arguments
	while getopts ":t:p:f" OPTION; do
		case ${OPTION} in
			t) THROTTLE="${OPTARG}" ;;
			p) PAUSE_TO_SETTLE="y"
			PAUSE_TIME="${OPTARG}" ;;
	    f) FORCE_CHECK="y" ;;
			?) ;;
		esac
	done
	shift $((OPTIND-1))

  if [[ ${FORCE_CHECK} == n ]]; then
    # Purge log if it is megabyte(s)
    purge_log

    # Log start of main logic
    printf %b%s%b "\n" "$(print_dashes 20) $(date '+%b %d %H:%M:%S') $(print_dashes 21)" "\n"
      printf "Change to /etc/resolv.conf detected\n"

    # Exit if we ran less than ${THROTTLE} seconds ago
    if [[ -r ${LAST_MARKER} ]]; then
      local now="$(date +%s)"
      local last_update="$(stat -f %m ${LAST_MARKER})"
      if (($((now - last_update)) < THROTTLE)); then
        printf "Ran less than ${THROTTLE} seconds ago, exiting.\n"
        finish
      fi
    fi

    # If -p was passed, pause to settle
    if [[ ${PAUSE_TO_SETTLE} == y ]]; then
          printf "Waiting for interfaces to settle: "
      for ((count=${PAUSE_TIME}; count!=0; count--)) { sleep 1 ; printf "${count} "; }
          printf "\n"
    fi

    perform_check_and_switch
    finish
  else
    perform_check_and_switch
  fi
}

#-------------------------------------------------------------------------------
# Main script
#
#

if (($# == 0)); then
	main
else
	main "${@}"
fi

# If we got here something went wrong
exit 1
